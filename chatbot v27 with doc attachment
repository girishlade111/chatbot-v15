import { useState, useRef, useEffect } from 'react';
import { Send, Loader2, Paperclip, X, Plus, Clock, User, Bot, Sparkles } from 'lucide-react';
import { Button } from "/components/ui/button";
import { Input } from "/components/ui/input";
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from "/components/ui/card";
import { motion } from "framer-motion";

type Message = {
  id: string;
  text: string;
  sender: 'user' | 'bot' | 'thinking';
  attachments?: Attachment[];
  isTyping?: boolean;
};

type Attachment = {
  id: string;
  name: string;
  type: 'image' | 'document' | 'audio' | 'video';
  previewUrl?: string;
};

type Conversation = {
  id: string;
  title: string;
  messages: Message[];
  createdAt: Date;
};

const GEMINI_API_KEY = "AIzaSyDK68voN4wRnCh95nrlu0m9vHbtJKOECqM";
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

export default function Chatbot() {
  const [conversations, setConversations] = useState<Conversation[]>(() => {
    const defaultConv = {
      id: '1',
      title: 'New Chat',
      messages: [{
        id: '1',
        text: 'Hello! How can I help you today?',
        sender: 'bot'
      }],
      createdAt: new Date()
    };
    return [defaultConv];
  });
  const [currentConversationId, setCurrentConversationId] = useState('1');
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [attachments, setAttachments] = useState<Attachment[]>([]);
  const [currentThinkingStep, setCurrentThinkingStep] = useState(0);
  const [showThinkingProcess, setShowThinkingProcess] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const currentConversation = conversations.find(c => c.id === currentConversationId) || conversations[0];

  // Thinking animation steps
  const thinkingSteps = [
    "Analyzing your message...",
    "Consulting knowledge base...",
    "Formulating response...",
    "Finalizing answer..."
  ];

  const createNewConversation = () => {
    const newConversation = {
      id: Date.now().toString(),
      title: 'New Chat',
      messages: [{
        id: '1',
        text: 'Hello! How can I help you today?',
        sender: 'bot'
      }],
      createdAt: new Date()
    };
    setConversations(prev => [newConversation, ...prev]);
    setCurrentConversationId(newConversation.id);
    setInputValue('');
    setAttachments([]);
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const newAttachments: Attachment[] = Array.from(e.target.files).map(file => {
        const fileType = file.type.split('/')[0] as 'image' | 'document' | 'audio' | 'video';
        return {
          id: Date.now().toString() + Math.random().toString(36).substring(2, 9),
          name: file.name,
          type: fileType,
          previewUrl: fileType === 'image' ? URL.createObjectURL(file) : undefined
        };
      });
      setAttachments(prev => [...prev, ...newAttachments]);
    }
  };

  const removeAttachment = (id: string) => {
    setAttachments(prev => prev.filter(attachment => {
      if (attachment.id === id && attachment.previewUrl) {
        URL.revokeObjectURL(attachment.previewUrl);
      }
      return attachment.id !== id;
    }));
  };

  const startThinkingAnimation = () => {
    setShowThinkingProcess(true);
    setCurrentThinkingStep(0);
    
    const interval = setInterval(() => {
      setCurrentThinkingStep(prev => {
        if (prev >= thinkingSteps.length - 1) {
          clearInterval(interval);
          return prev;
        }
        return prev + 1;
      });
    }, 800);
  };

  const simulateTyping = (text: string, callback: (fullText: string) => void) => {
    let i = 0;
    const typingInterval = setInterval(() => {
      if (i < text.length) {
        setConversations(prev => prev.map(conv => {
          if (conv.id === currentConversationId) {
            const lastMsg = conv.messages[conv.messages.length - 1];
            if (lastMsg.sender === 'bot' && lastMsg.isTyping) {
              const updatedMessages = [...conv.messages];
              updatedMessages[updatedMessages.length - 1] = {
                ...lastMsg,
                text: text.substring(0, i + 1)
              };
              return { ...conv, messages: updatedMessages };
            }
          }
          return conv;
        }));
        i++;
      } else {
        clearInterval(typingInterval);
        callback(text);
      }
    }, 20);
  };

  const callGeminiAPI = async (prompt: string) => {
    try {
      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{ text: prompt }]
          }]
        })
      });

      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`);
      }

      const data = await response.json();
      return data.candidates?.[0]?.content?.parts?.[0]?.text || "I couldn't generate a response. Please try again.";
    } catch (error) {
      console.error('Error calling Gemini API:', error);
      return "Sorry, I encountered an error while processing your request.";
    }
  };

  const handleSendMessage = async () => {
    if (inputValue.trim() === '' && attachments.length === 0) return;

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      sender: 'user',
      attachments: [...attachments]
    };

    setConversations(prev => prev.map(conv => {
      if (conv.id === currentConversationId) {
        return {
          ...conv,
          messages: [...conv.messages, userMessage],
          title: conv.messages.length === 1 ? (inputValue.slice(0, 20) || 'File shared') : conv.title
        };
      }
      return conv;
    }));

    setInputValue('');
    setAttachments([]);
    setIsLoading(true);

    // Start thinking animation
    startThinkingAnimation();

    try {
      // Call Gemini API
      const botResponse = await callGeminiAPI(inputValue);
      
      // Complete thinking process
      setShowThinkingProcess(false);
      
      // Add typing message
      setConversations(prev => prev.map(conv => {
        if (conv.id === currentConversationId) {
          return {
            ...conv,
            messages: [
              ...conv.messages,
              {
                id: Date.now().toString(),
                text: '',
                sender: 'bot',
                isTyping: true
              }
            ]
          };
        }
        return conv;
      }));

      // Start typing animation
      simulateTyping(botResponse, () => {
        setIsLoading(false);
      });
    } catch (error) {
      console.error('Error:', error);
      setShowThinkingProcess(false);
      setIsLoading(false);
      
      // Add error message
      setConversations(prev => prev.map(conv => {
        if (conv.id === currentConversationId) {
          return {
            ...conv,
            messages: [
              ...conv.messages,
              {
                id: Date.now().toString(),
                text: "Sorry, I encountered an error while processing your request.",
                sender: 'bot'
              }
            ]
          };
        }
        return conv;
      }));
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [currentConversation?.messages]);

  useEffect(() => {
    return () => {
      attachments.forEach(attachment => {
        if (attachment.previewUrl) {
          URL.revokeObjectURL(attachment.previewUrl);
        }
      });
    };
  }, [attachments]);

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar */}
      <div className="w-64 bg-white border-r p-4 hidden md:block">
        <Button 
          onClick={createNewConversation}
          className="w-full mb-4"
        >
          <Plus className="h-4 w-4 mr-2" />
          New Chat
        </Button>
        
        <div className="space-y-2">
          {conversations.map(conv => (
            <div
              key={conv.id}
              onClick={() => setCurrentConversationId(conv.id)}
              className={`p-3 rounded-lg cursor-pointer hover:bg-gray-100 ${currentConversationId === conv.id ? 'bg-gray-200' : ''}`}
            >
              <div className="font-medium truncate">{conv.title}</div>
              <div className="text-xs text-gray-500 flex items-center mt-1">
                <Clock className="h-3 w-3 mr-1" />
                {conv.createdAt.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        <Card className="flex-1 mx-2 my-2 md:mx-4 md:my-4 flex flex-col">
          <CardHeader className="border-b p-4">
            <div className="flex items-center justify-between">
              <CardTitle className="text-xl">{currentConversation.title}</CardTitle>
              <Button 
                variant="ghost" 
                size="sm" 
                className="md:hidden"
                onClick={createNewConversation}
              >
                <Plus className="h-4 w-4" />
              </Button>
            </div>
          </CardHeader>
          <CardContent className="flex-1 overflow-y-auto p-4 space-y-4">
            {currentConversation.messages.map(message => (
              <div
                key={message.id}
                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg flex items-start ${
                    message.sender === 'user'
                      ? 'bg-primary text-primary-foreground'
                      : 'bg-secondary text-secondary-foreground'
                  }`}
                >
                  <div className="mr-2 mt-1">
                    {message.sender === 'user' ? (
                      <User className="h-4 w-4" />
                    ) : (
                      <Bot className="h-4 w-4" />
                    )}
                  </div>
                  <div>
                    {message.text}
                    {message.attachments && message.attachments.length > 0 && (
                      <div className="mt-2 space-y-2">
                        {message.attachments.map(attachment => (
                          <div key={attachment.id} className="flex items-center p-2 bg-white/20 rounded">
                            {attachment.previewUrl ? (
                              <img 
                                src={attachment.previewUrl} 
                                alt={attachment.name} 
                                className="h-16 w-16 object-cover rounded mr-2"
                              />
                            ) : (
                              <div className="h-16 w-16 bg-gray-200 rounded flex items-center justify-center mr-2">
                                <Paperclip className="h-5 w-5 text-gray-500" />
                              </div>
                            )}
                            <span className="text-sm truncate">{attachment.name}</span>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
            {showThinkingProcess && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                className="flex justify-start"
              >
                <div className="max-w-xs lg:max-w-md px-4 py-2 rounded-lg bg-gray-100 text-gray-800">
                  <div className="flex items-center">
                    <Sparkles className="h-4 w-4 mr-2 text-yellow-500 animate-pulse" />
                    <div className="text-sm italic">
                      {thinkingSteps[currentThinkingStep]}
                    </div>
                  </div>
                  <div className="flex space-x-1 mt-2">
                    {thinkingSteps.map((_, index) => (
                      <motion.div
                        key={index}
                        className={`h-1 rounded-full ${index <= currentThinkingStep ? 'bg-yellow-500' : 'bg-gray-300'}`}
                        initial={{ width: 0 }}
                        animate={{ width: '100%' }}
                        transition={{ duration: 0.8 }}
                      />
                    ))}
                  </div>
                </div>
              </motion.div>
            )}
            <div ref={messagesEndRef} />
          </CardContent>
          <CardFooter className="border-t p-4">
            <div className="w-full">
              {attachments.length > 0 && (
                <div className="flex flex-wrap gap-2 mb-2">
                  {attachments.map(attachment => (
                    <div key={attachment.id} className="relative group">
                      {attachment.previewUrl ? (
                        <div className="h-16 w-16 rounded overflow-hidden">
                          <img 
                            src={attachment.previewUrl} 
                            alt={attachment.name} 
                            className="h-full w-full object-cover"
                          />
                        </div>
                      ) : (
                        <div className="h-16 w-16 bg-gray-200 rounded flex items-center justify-center">
                          <Paperclip className="h-5 w-5 text-gray-500" />
                        </div>
                      )}
                      <button
                        onClick={() => removeAttachment(attachment.id)}
                        className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full h-5 w-5 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                      >
                        <X className="h-3 w-3" />
                      </button>
                      <div className="absolute bottom-0 left-0 right-0 bg-black/50 text-white text-xs p-1 truncate">
                        {attachment.name}
                      </div>
                    </div>
                  ))}
                </div>
              )}
              
              <div className="flex w-full items-center space-x-2">
                <input
                  type="file"
                  ref={fileInputRef}
                  onChange={handleFileChange}
                  multiple
                  className="hidden"
                />
                <Button
                  variant="ghost"
                  size="icon"
                  type="button"
                  onClick={() => fileInputRef.current?.click()}
                >
                  <Paperclip className="h-4 w-4" />
                </Button>
                <Input
                  value={inputValue}
                  onChange={e => setInputValue(e.target.value)}
                  onKeyDown={handleKeyDown}
                  placeholder="Type a message..."
                  disabled={isLoading}
                />
                <Button
                  onClick={handleSendMessage}
                  disabled={isLoading || (inputValue.trim() === '' && attachments.length === 0)}
                  size="icon"
                >
                  {isLoading ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <Send className="h-4 w-4" />
                  )}
                </Button>
              </div>
            </div>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
}
