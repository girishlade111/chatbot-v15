import { useState, useRef, useEffect } from 'react'
import { Send, User, Bot, Loader2, Plus, Clock3, Menu, Search, Paperclip } from 'lucide-react'
import { Textarea } from "/components/ui/textarea"
import { Button } from "/components/ui/button"
import { Separator } from "/components/ui/separator"
import { Input } from "/components/ui/input"
import { Popover, PopoverTrigger, PopoverContent } from "/components/ui/popover"

type Message = {
  id: string
  content: string
  role: 'user' | 'assistant' | 'thinking'
  isStreaming?: boolean
  attachments?: Attachment[]
}

type Attachment = {
  id: string
  name: string
  type: 'image' | 'document' | 'audio' | 'video'
  previewUrl?: string
}

type Conversation = {
  id: string
  title: string
  messages: Message[]
  createdAt: Date
}

type Particle = {
  id: number
  x: number
  y: number
  size: number
  color: string
  speedX: number
  speedY: number
  alpha: number
}

const GEMINI_API_KEY = 'AIzaSyDK68voN4wRnCh95nrlu0m9vHbtJKOECqM'
const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`

// Thinking animation component
const ThinkingAnimation = () => {
  return (
    <div className="flex space-x-1 items-center">
      <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '0ms' }} />
      <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '150ms' }} />
      <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '300ms' }} />
    </div>
  )
}

// Text streaming component
const StreamingText = ({ text }: { text: string }) => {
  const [displayedText, setDisplayedText] = useState('')
  const [currentIndex, setCurrentIndex] = useState(0)

  useEffect(() => {
    if (currentIndex < text.length) {
      const timeout = setTimeout(() => {
        setDisplayedText(prev => prev + text[currentIndex])
        setCurrentIndex(prev => prev + 1)
      }, 20)

      return () => clearTimeout(timeout)
    }
  }, [currentIndex, text])

  return <>{displayedText}</>
}

// Particle effect component
const Particles = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const [particles, setParticles] = useState<Particle[]>([])
  const [dimensions, setDimensions] = useState({ width: 0, height: 0 })

  useEffect(() => {
    const updateDimensions = () => {
      if (canvasRef.current?.parentElement) {
        setDimensions({
          width: canvasRef.current.parentElement.clientWidth,
          height: canvasRef.current.parentElement.clientHeight
        })
      }
    }

    updateDimensions()
    window.addEventListener('resize', updateDimensions)
    return () => window.removeEventListener('resize', updateDimensions)
  }, [])

  useEffect(() => {
    if (dimensions.width === 0 || dimensions.height === 0) return

    // Initialize canvas
    const canvas = canvasRef.current
    if (!canvas) return
    canvas.width = dimensions.width
    canvas.height = dimensions.height
    const ctx = canvas.getContext('2d')
    if (!ctx) return

    // Create particles
    const colors = ['#3b82f6', '#6366f1', '#8b5cf6', '#ec4899', '#f43f5e']
    const newParticles = Array.from({ length: 50 }, (_, i) => ({
      id: i,
      x: Math.random() * dimensions.width,
      y: Math.random() * dimensions.height,
      size: Math.random() * 3 + 1,
      color: colors[Math.floor(Math.random() * colors.length)],
      speedX: Math.random() * 2 - 1,
      speedY: Math.random() * 2 - 1,
      alpha: Math.random() * 0.5 + 0.1
    }))
    setParticles(newParticles)

    // Animation loop
    let animationFrameId: number
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height)

      setParticles(prevParticles => {
        return prevParticles.map(p => {
          // Update position
          let newX = p.x + p.speedX
          let newY = p.y + p.speedY
          let newSpeedX = p.speedX
          let newSpeedY = p.speedY

          // Bounce off edges
          if (newX > dimensions.width || newX < 0) {
            newSpeedX = -newSpeedX
            newX = Math.max(0, Math.min(newX, dimensions.width))
          }
          if (newY > dimensions.height || newY < 0) {
            newSpeedY = -newSpeedY
            newY = Math.max(0, Math.min(newY, dimensions.height))
          }

          // Draw particle
          ctx.globalAlpha = p.alpha
          ctx.fillStyle = p.color
          ctx.beginPath()
          ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2)
          ctx.fill()

          return {
            ...p,
            x: newX,
            y: newY,
            speedX: newSpeedX,
            speedY: newSpeedY
          }
        })
      })

      animationFrameId = requestAnimationFrame(animate)
    }

    animate()

    return () => {
      cancelAnimationFrame(animationFrameId)
    }
  }, [dimensions])

  return (
    <canvas
      ref={canvasRef}
      className="absolute inset-0 w-full h-full pointer-events-none"
    />
  )
}

export default function GirishAIAssistant() {
  const [conversations, setConversations] = useState<Conversation[]>(() => {
    return [{
      id: '1',
      title: 'New conversation',
      messages: [{
        id: '1',
        content: 'Hello! I\'m Girish AI Assistant, powered by Gemini. How can I help you today?',
        role: 'assistant'
      }],
      createdAt: new Date()
    }]
  })
  const [currentConversationId, setCurrentConversationId] = useState('1')
  const [input, setInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [showSidebar, setShowSidebar] = useState(true)
  const [searchQuery, setSearchQuery] = useState('')
  const [attachments, setAttachments] = useState<Attachment[]>([])
  const fileInputRef = useRef<HTMLInputElement>(null)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const currentConversation = conversations.find(c => c.id === currentConversationId) || conversations[0]
  const messages = currentConversation.messages

  const filteredConversations = conversations.filter(conv => 
    conv.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    conv.messages.some(msg => msg.content.toLowerCase().includes(searchQuery.toLowerCase()))
  )

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const newAttachments: Attachment[] = Array.from(e.target.files).map(file => {
        const fileType = file.type.split('/')[0] as 'image' | 'document' | 'audio' | 'video'
        return {
          id: Date.now().toString() + Math.random().toString(36).substring(2, 9),
          name: file.name,
          type: fileType,
          previewUrl: fileType === 'image' ? URL.createObjectURL(file) : undefined
        }
      })
      setAttachments(prev => [...prev, ...newAttachments])
    }
  }

  const removeAttachment = (id: string) => {
    setAttachments(prev => prev.filter(attachment => attachment.id !== id))
  }

  const generateContent = async (prompt: string) => {
    try {
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{ text: prompt }]
          }]
        })
      })

      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`)
      }

      const data = await response.json()
      return data.candidates?.[0]?.content?.parts?.[0]?.text || "I couldn't generate a response. Please try again."
    } catch (error) {
      console.error('Error calling Gemini API:', error)
      return "Sorry, I encountered an error. Please try again later."
    }
  }

  const handleSubmit = async (e?: React.FormEvent) => {
    e?.preventDefault()
    if (!input.trim() && attachments.length === 0) return

    const userMessage: Message = {
      id: Date.now().toString(),
      content: input,
      role: 'user',
      attachments: attachments.length > 0 ? [...attachments] : undefined
    }

    // Add thinking message
    const thinkingMessage: Message = {
      id: `thinking-${Date.now()}`,
      content: '',
      role: 'thinking'
    }

    const updatedConversations = conversations.map(conv => {
      if (conv.id === currentConversationId) {
        return {
          ...conv,
          messages: [...conv.messages, userMessage, thinkingMessage],
          title: conv.messages.length === 1 ? (input.slice(0, 30) || 'File shared') : conv.title
        }
      }
      return conv
    })
    setConversations(updatedConversations)
    setInput('')
    setAttachments([])
    setIsLoading(true)

    try {
      const response = await generateContent(input)
      
      // Remove thinking message and add assistant response with streaming flag
      setConversations(prev => prev.map(conv => {
        if (conv.id === currentConversationId) {
          return {
            ...conv,
            messages: conv.messages
              .filter(msg => msg.role !== 'thinking')
              .concat({
                id: Date.now().toString(),
                content: response,
                role: 'assistant',
                isStreaming: true
              })
          }
        }
        return conv
      }))
    } catch (error) {
      console.error('Error generating response:', error)
      // Remove thinking message and add error message
      setConversations(prev => prev.map(conv => {
        if (conv.id === currentConversationId) {
          return {
            ...conv,
            messages: conv.messages
              .filter(msg => msg.role !== 'thinking')
              .concat({
                id: Date.now().toString(),
                content: "Sorry, I couldn't generate a response. Please try again.",
                role: 'assistant'
              })
          }
        }
        return conv
      }))
    } finally {
      setIsLoading(false)
    }
  }

  const startNewChat = () => {
    const newConversation: Conversation = {
      id: Date.now().toString(),
      title: 'New conversation',
      messages: [{
        id: '1',
        content: 'Hello! I\'m Girish AI Assistant, powered by Gemini. How can I help you today?',
        role: 'assistant'
      }],
      createdAt: new Date()
    }
    setConversations([newConversation, ...conversations])
    setCurrentConversationId(newConversation.id)
    setShowSidebar(false)
    setSearchQuery('')
  }

  const selectConversation = (id: string) => {
    setCurrentConversationId(id)
    setShowSidebar(false)
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSubmit()
    }
  }

  const toggleSidebar = () => {
    setShowSidebar(!showSidebar)
  }

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  return (
    <div className="flex h-screen bg-gray-50 relative overflow-hidden">
      {/* Particle background */}
      <div className="absolute inset-0 w-full h-full">
        <Particles />
      </div>

      {/* Sidebar - History */}
      <div className={`fixed md:relative z-20 w-64 h-full bg-white/80 border-r backdrop-blur-sm transition-transform duration-300 ease-in-out ${showSidebar ? 'translate-x-0' : '-translate-x-full md:translate-x-0'}`}>
        <div className="p-4">
          <Button 
            onClick={startNewChat}
            className="w-full bg-blue-500 hover:bg-blue-600 text-white"
          >
            <Plus className="h-4 w-4 mr-2" />
            New chat
          </Button>
        </div>
        
        {/* Compact Search Bar */}
        <div className="px-3 pb-2">
          <div className="relative">
            <Search className="absolute left-2.5 top-1/2 -translate-y-1/2 h-3.5 w-3.5 text-gray-400" />
            <Input
              type="text"
              placeholder="Search..."
              className="pl-8 pr-2 py-1 h-7 text-xs bg-white border-gray-300 focus-visible:ring-0 focus-visible:ring-offset-0"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
        </div>

        <Separator className="bg-gray-200" />
        <div className="overflow-y-auto h-[calc(100%-150px)]">
          <div className="p-2">
            <h3 className="text-sm text-gray-500 px-2 py-2">Recent conversations</h3>
            {filteredConversations.map(conversation => (
              <Button
                key={conversation.id}
                onClick={() => selectConversation(conversation.id)}
                variant="ghost"
                className={`w-full justify-start text-left ${currentConversationId === conversation.id ? 'bg-gray-100/50' : 'text-gray-700 hover:bg-gray-100/50'}`}
              >
                <Clock3 className="h-4 w-4 mr-2 text-gray-500" />
                <span className="truncate">{conversation.title}</span>
              </Button>
            ))}
            {filteredConversations.length === 0 && (
              <p className="text-sm text-gray-500 px-2 py-2">No conversations found</p>
            )}
          </div>
        </div>
      </div>

      {/* Main chat area */}
      <div className="flex-1 flex flex-col overflow-hidden relative z-10">
        {/* Header */}
        <header className="border-b bg-white/80 backdrop-blur-sm flex items-center p-2 md:p-4">
          <Button 
            variant="ghost" 
            size="icon"
            onClick={toggleSidebar}
            className="md:hidden mr-2"
          >
            <Menu className="h-6 w-6" />
          </Button>
          <h1 className="text-xl font-semibold">Girish AI Assistant</h1>
        </header>

        {/* Messages container */}
        <main className="flex-1 overflow-y-auto p-4 max-w-4xl mx-auto w-full pb-24">
          <div className="space-y-6">
            {messages.map((message) => (
              <div key={message.id} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`flex max-w-3xl ${message.role === 'user' ? 'flex-row-reverse' : ''}`}>
                  <div className={`flex-shrink-0 h-8 w-8 rounded-full flex items-center justify-center ${message.role === 'user' ? 'bg-blue-500 text-white ml-3' : 'bg-gray-200 text-gray-700 mr-3'}`}>
                    {message.role === 'user' ? <User className="h-5 w-5" /> : <Bot className="h-5 w-5" />}
                  </div>
                  <div className={`px-4 py-3 rounded-lg ${message.role === 'user' ? 'bg-blue-500 text-white' : message.role === 'thinking' ? 'bg-white border text-gray-800' : 'bg-white border text-gray-800'}`}>
                    {message.role === 'thinking' ? (
                      <ThinkingAnimation />
                    ) : message.isStreaming ? (
                      message.content.split('\n').map((paragraph, i) => (
                        <p key={i} className="mb-2 last:mb-0">
                          <StreamingText text={paragraph} />
                        </p>
                      ))
                    ) : (
                      message.content.split('\n').map((paragraph, i) => (
                        <p key={i} className="mb-2 last:mb-0">{paragraph}</p>
                      ))
                    )}
                    {message.attachments && message.attachments.length > 0 && (
                      <div className="mt-2 space-y-2">
                        {message.attachments.map(attachment => (
                          <div key={attachment.id} className="flex items-center p-2 bg-white/20 rounded">
                            {attachment.type === 'image' && attachment.previewUrl ? (
                              <img 
                                src={attachment.previewUrl} 
                                alt={attachment.name} 
                                className="h-16 w-16 object-cover rounded mr-2"
                              />
                            ) : (
                              <div className="h-16 w-16 bg-gray-200 rounded flex items-center justify-center mr-2">
                                <Paperclip className="h-5 w-5 text-gray-500" />
                              </div>
                            )}
                            <span className="text-sm truncate">{attachment.name}</span>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
            <div ref={messagesEndRef} />
          </div>
        </main>

        {/* Fixed input area at bottom of chat section */}
        <div className="absolute bottom-0 left-0 right-0 bg-white/80 backdrop-blur-sm border-t">
          {/* Attachment preview */}
          {attachments.length > 0 && (
            <div className="px-4 pt-2 pb-1 flex flex-wrap gap-2 max-w-4xl mx-auto">
              {attachments.map(attachment => (
                <div key={attachment.id} className="relative group">
                  {attachment.type === 'image' && attachment.previewUrl ? (
                    <div className="h-16 w-16 rounded overflow-hidden">
                      <img 
                        src={attachment.previewUrl} 
                        alt={attachment.name} 
                        className="h-full w-full object-cover"
                      />
                    </div>
                  ) : (
                    <div className="h-16 w-16 bg-gray-200 rounded flex items-center justify-center">
                      <Paperclip className="h-5 w-5 text-gray-500" />
                    </div>
                  )}
                  <button
                    onClick={() => removeAttachment(attachment.id)}
                    className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full h-5 w-5 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                  >
                    <span className="text-xs">×</span>
                  </button>
                  <div className="absolute bottom-0 left-0 right-0 bg-black/50 text-white text-xs p-1 truncate">
                    {attachment.name}
                  </div>
                </div>
              ))}
            </div>
          )}
          
          {/* Input form */}
          <div className="max-w-4xl mx-auto p-4">
            <form onSubmit={handleSubmit} className="relative">
              <input
                type="file"
                ref={fileInputRef}
                onChange={handleFileChange}
                multiple
                className="hidden"
              />
              <div className="absolute left-2 bottom-2 flex space-x-1">
                <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  className="h-7 w-7"
                  onClick={() => fileInputRef.current?.click()}
                >
                  <Paperclip className="h-3.5 w-3.5" />
                </Button>
              </div>
              <Textarea
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyDown={handleKeyDown}
                placeholder="Type your message..."
                className="pl-10 pr-12 resize-none text-sm bg-white/90"
                rows={1}
                style={{ minHeight: '44px', maxHeight: '120px' }}
              />
              <Button
                type="submit"
                disabled={(!input.trim() && attachments.length === 0) || isLoading}
                size="icon"
                className="absolute right-2 bottom-2 h-7 w-7"
                variant="ghost"
              >
                {isLoading ? (
                  <Loader2 className="h-3.5 w-3.5 animate-spin" />
                ) : (
                  <Send className="h-3.5 w-3.5" />
                )}
              </Button>
            </form>
          </div>
        </div>
      </div>

      {/* Mobile overlay */}
      {showSidebar && (
        <div 
          className="fixed inset-0 bg-black/50 z-10 md:hidden"
          onClick={() => setShowSidebar(false)}
        />
      )}
    </div>
  )
}
